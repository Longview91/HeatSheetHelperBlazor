@inject IJSRuntime JS

<div class="@NavMenuCssClass">
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="">Heat Sheet Helper</a>
        </div>
    </div>

    <input type="checkbox" title="Navigation menu" class="navbar-toggler" />

    <div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
        <nav class="flex-column">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="allevents">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> AllEvents
                </NavLink>
            </div>
        </nav>
    </div>
</div>

@code {
    private string NavMenuCssClass = "show-nav";
    private DotNetObjectReference<NavMenu>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerNavMenuScroll", objRef);
        }
    }

    [JSInvokable]
    public void HideNavMenu()
    {
        Console.WriteLine("HideNavMenu called"); // Add this line
        if (NavMenuCssClass != "hide-nav")
        {
            NavMenuCssClass = "hide-nav";
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void ShowNavMenu()
    {
        Console.WriteLine("ShowNavMenu called"); // Add this line
        if (NavMenuCssClass != "show-nav")
        {
            NavMenuCssClass = "show-nav";
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}